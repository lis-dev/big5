{"version":3,"sources":["components/Loading.tsx","components/ChoiceButton.tsx","components/QuestionCard.tsx","types.ts","api/Api.tsx","b5/ResultCalculator.tsx","b5/CalculationFunction.ts","components/QuizResult.tsx","components/Quiz.tsx","state.ts","App.tsx","reportWebVitals.ts","languages.ts","components/SelectLanguage.tsx","logo.svg","components/Base.tsx","index.tsx"],"names":["Loading","className","role","ChoiceButton","props","onClick","e","choice","text","QuestionCard","choices","map","i","onAnswer","score","question","number","totalNumber","domains","Answer","domain","facet","ResultObject","count","result","getData","dir","filename","lang","a","fetch","process","json","ResultCalculator","calculationFunction","answers","domainResult","this","initDomainResult","answer","calculateFacet","facets","average","QuizResult","resultCalculator","state","resultTexts","then","res","setState","resultTextItem","textData","domainResultText","results","find","el","push","title","shortDescription","description","resultText","calculate","resultToTextResult","data","Component","Quiz","questions","currentQuestion","currentQuestionNumber","bind","initQuestionsAndAnswers","concat","length","currentChoices","keyed","getQuestions","getChoices","proxy","App","snap","useSnapshot","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","languages","en","ru","uk","SelectLanguage","value","onChange","target","Object","keys","code","Base","href","src","logo","alt","children","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cea58655.chunk.js","sourcesContent":["export function Loading() {\n  return (\n    <div className='spinner text-primary' role='status'>\n      <span className='sr-only'>Loading...</span>\n    </div>\n  );\n}\n","import { Choice } from '../types';\n\ninterface Props {\n  choice: Choice;\n  onClick: (choice: Choice) => void;\n}\n\nexport function ChoiceButton(props: Props) {\n  return (\n    <button className='w-full md:w-auto btn btn-light' onClick={(e) => {props.onClick(props.choice)}}>\n      {props.choice.text}\n    </button>\n  );\n}\n","import { Choice, Question } from '../types'\nimport { ChoiceButton } from './ChoiceButton'\n\ninterface Props {\n  question: Question\n  choices: Choice[]\n  number: number\n  totalNumber?: number\n  onAnswer: (c: Choice) => void\n}\n\nexport function QuestionCard(props: Props) {\n  let choices = props.choices.map((choice, i) => (\n    <ChoiceButton\n      key={choice.score + '_' + i}\n      choice={choice}\n      onClick={props.onAnswer}\n    />\n  ))\n  return (\n    <div className=\"h-full\">\n      <div className=\"grid place-items-center md:p-10 md:w-2/3 m-auto\">\n          <div className=\"rounded-xl transform shadow-lg bg-gradient-to-r from-purple-500 to-indigo-300 -rotate-1 sm:-rotate-2 p-2\">\n            <div className=\" card  rounded-xl sm:rounded-xl overflow-hidden flex p-8 transform rotate-1 sm:rotate-2\">\n              <div className=\"grid grid-cols-12\">\n                <div className=\"col-span-10 pb-10 text-2xl text-center\">\n                  <div className=\"card-body\">{props.question.text}</div>\n                </div>\n                <div className=\"col-span-2 text-2xl text-right\">\n                  <span className=\"whitespace-nowrap\"># {props.number}</span>\n                  <br />\n                  {props.totalNumber ? (\n                    <sup className=\"text-sm whitespace-nowrap\"> of {props.totalNumber}</sup>\n                  ) : (\n                    ''\n                  )}\n                </div>\n              </div>\n              <div className=\"justify-end card-footer flex-col md:flex-row\">{choices}</div>\n            </div>\n          </div>\n      </div>\n    </div>\n  )\n}\n","export const domains = ['N', 'E', 'A', 'C', 'O']\n\nexport type Domain = typeof domains[number]\n\nexport type Result = 'low' | 'neutral' | 'high'\n\nexport type Question = {\n  text: string\n  keyed: 'plus' | 'minus'\n  domain: Domain\n  facet: number\n}\n\nexport type Choices = {\n  plus: Choice[]\n  minus: Choice[]\n}\n\nexport type Choice = {\n  text: string\n  score: number\n}\n\nexport type ScoreResult = {\n  score: Result\n  text: string\n}\n\ntype Facet = {\n  facet: number\n  title: string\n  text: string\n}\n\nexport type FacetResult = Facet & {\n  result: Result\n}\n\n// Bunch of texts from json file\nexport type ResultText = {\n  domain: Domain\n  title: string\n  shortDescription: string\n  description: string\n  results: ScoreResult[]\n  facets: Facet[]\n}\n\n// Result of quiz\nexport type ResultTextItem = {\n  domain: Domain\n  title: string\n  shortDescription: string\n  description: string\n  resultText: string\n  facets: FacetResult[]\n}\n\nexport class Answer {\n  constructor(\n    public domain: Domain,\n    public facet: number,\n    public score: number\n  ) {}\n}\n\nexport type DomainFacetResult = {\n  [k: number]: ResultObject\n}\n\nexport type DomainResult = Record<Domain, DomainResultObject>\n\nexport type DomainResultObject = ResultObject & {\n  facets: DomainFacetResult\n}\n\nexport class ResultObject {\n  constructor(\n    public score: number,\n    public count: number,\n    public result: Result\n  ) {}\n}\n","// TODO Use transport\nimport { Choices, Question, ResultText } from '../types'\n\nconst server = process.env.REACT_APP_QUIZ_SERVER_URL || process.env.PUBLIC_URL\n\nexport function getQuestions(lang: string): Promise<Question[]> {\n  return getData('test', 'questions.json', lang)\n}\n\nexport function getChoices(lang: string): Promise<Choices> {\n  return getData('test', 'choices.json', lang)\n}\n\nexport function getResultTexts(lang: string): Promise<ResultText[]> {\n  return getData('result', 'index.json', lang)\n}\n\nconst getData = async (\n  dir: 'test' | 'result',\n  filename: string,\n  lang: string\n) => {\n  return (await fetch(server + `/data/${dir}/${lang}/` + filename)).json()\n}\n","import {\n  Answer,\n  DomainResult,\n  Result,\n  ResultObject,\n  domains,\n  DomainResultObject,\n} from '../types';\n\nexport class ResultCalculator {\n  constructor(private calculationFunction: (s: number, c: number) => Result) {}\n\n  calculate(answers: Answer[]): DomainResult {\n    let domainResult: DomainResult = this.initDomainResult();\n\n    for (let answer of answers) {\n      const result = domainResult[answer.domain];\n      result.score += answer.score;\n      result.count++;\n      result.result = this.calculationFunction(result.score, result.count);\n      this.calculateFacet(result, answer);\n    }\n    return domainResult;\n  }\n\n  private calculateFacet(result: DomainResultObject, answer: Answer): void {\n    const facets = result.facets;\n    if (typeof facets[answer.facet] === 'undefined') {\n      facets[answer.facet] = new ResultObject(0, 0, 'neutral');\n    }\n    const facet = facets[answer.facet];\n    facet.count++;\n    facet.score += answer.score;\n    facet.result = this.calculationFunction(facet.score, facet.count);\n  }\n\n  private initDomainResult(): DomainResult {\n    let domainResult: Partial<DomainResult> = {};\n    for (let domain of domains) {\n      domainResult[domain] = {\n        score: 0,\n        count: 0,\n        result: 'neutral',\n        facets: [],\n      };\n    }\n    return domainResult as DomainResult;\n  }\n}\n","import { Result } from '../types';\n\nexport const calculationFunction = (score: number, count: number): Result => {\n  const average = score / count;\n  let result: Result = 'neutral';\n  if (average > 3) {\n    result = 'high';\n  } else if (average < 3) {\n    result = 'low';\n  }\n  return result;\n};\n","import { Component } from 'react'\nimport { Loading } from './Loading'\nimport {\n  Answer,\n  DomainResult,\n  FacetResult,\n  ResultText,\n  ResultTextItem,\n} from '../types'\nimport { getResultTexts } from '../api/Api'\n\nimport { ResultCalculator } from '../b5/ResultCalculator'\nimport { calculationFunction } from '../b5/CalculationFunction'\n\ntype Props = { lang: string; answers: Answer[] }\n\ntype State = {\n  answers: Answer[]\n  resultTexts: ResultText[]\n  result: DomainResult\n  lang: string\n}\n\nexport class QuizResult extends Component<Props, State> {\n  private resultCalculator: ResultCalculator\n\n  state: State = {\n    answers: [],\n    result: {},\n    resultTexts: [],\n    lang: 'en',\n  }\n\n  constructor(props: Props) {\n    super(props)\n    this.resultCalculator = new ResultCalculator(calculationFunction)\n  }\n\n  componentDidMount() {\n    getResultTexts(this.props.lang).then((res) => {\n      return this.setState({ resultTexts: res })\n    })\n  }\n\n  // TODO Move from here\n  private resultToTextResult(result: DomainResult): ResultTextItem[] {\n    let resultTextItem: ResultTextItem[] = []\n\n    for (const textData of this.state.resultTexts) {\n      let domainResultText = textData.results.find(\n        (el) => el.score === result[textData.domain].result\n      )\n      let facets: FacetResult[] = textData.facets.map((el) => ({\n        result: result[textData.domain].facets[el.facet]\n          ? result[textData.domain].facets[el.facet].result\n          : 'neutral',\n        ...el,\n      }))\n\n      resultTextItem.push({\n        domain: textData.domain,\n        title: textData.title,\n        shortDescription: textData.shortDescription,\n        description: textData.description,\n        resultText: domainResultText!.text,\n        facets,\n      })\n    }\n    return resultTextItem\n  }\n\n  render() {\n    if (!this.state.resultTexts) {\n      return <Loading></Loading>\n    }\n\n    let result: DomainResult = this.resultCalculator.calculate(\n      this.props.answers\n    )\n\n    let resultText: ResultTextItem[] = result\n      ? this.resultToTextResult(result)\n      : []\n\n    return resultText.map((data, i) => {\n      return (\n        <div\n          key={data.domain}\n          className=\"card md:w-2/3 mx-auto rounded-r-xl sm:rounded-xl overflow-hidden flex p-8 mb-8\"\n        >\n          <div className=\"card-header\">\n            <div className=\"font-semibold text-gray-900\">{data.title}</div>\n          </div>\n          <div className=\"card-body\">{data.description}</div>\n          <div className=\"card-body\">{data.resultText}</div>\n          <div className=\"card-body\">\n            <table className=\"table-auto border-separate\">\n              <tbody>\n                {data.facets.map((facet, i) => (\n                  <tr key={'facet' + i} className=\"border-separate border\">\n                    <td className=\"p-2\">{facet.title}</td>\n                    <td className=\"p-2\">{facet.result}</td>\n                    <td className=\"p-2\">{facet.text}</td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        </div>\n      )\n    })\n  }\n}\n","import { Component } from 'react'\nimport { Loading } from './Loading'\nimport { QuestionCard } from './QuestionCard'\nimport { Answer, Choice, Choices, Question } from '../types'\nimport { getChoices, getQuestions } from '../api/Api'\nimport { QuizResult } from './QuizResult'\n\ntype Props = { lang: string }\n\ntype State = {\n  questions: Question[]\n  currentQuestion: Question | null\n  currentQuestionNumber: number\n  choices: Choices | null\n  answers: Answer[]\n  lang: string\n}\n\nexport class Quiz extends Component<Props, State> {\n  state: State = {\n    questions: [],\n    currentQuestion: null,\n    currentQuestionNumber: 0,\n    choices: null,\n    answers: [],\n    lang: 'en',\n  }\n\n  constructor(props: Props) {\n    super(props)\n    this.onAnswer = this.onAnswer.bind(this)\n  }\n\n  componentDidMount() {\n    this.initQuestionsAndAnswers(this.props.lang)\n  }\n\n  componentDidUpdate() {\n    if (this.state.lang === this.props.lang) {\n      return\n    }\n    this.setState({ lang: this.props.lang })\n    this.initQuestionsAndAnswers(this.props.lang)\n  }\n\n  onAnswer(choice: Choice) {\n    this.setState((state, props) => {\n      return {\n        currentQuestionNumber: state.currentQuestionNumber + 1,\n        currentQuestion: state.questions[state.currentQuestionNumber + 1],\n        answers: state.answers.concat([\n          new Answer(\n            state.currentQuestion!.domain,\n            state.currentQuestion!.facet,\n            choice.score\n          ),\n        ]),\n      }\n    })\n  }\n\n  render() {\n    if (\n      this.state.currentQuestionNumber &&\n      this.state.questions.length &&\n      this.state.currentQuestionNumber >= this.state.questions.length\n    ) {\n      return (\n        <QuizResult\n          answers={this.state.answers}\n          lang={this.props.lang}\n          key={this.props.lang} // Re-mount when language is changed\n        />\n      )\n    }\n\n    if (\n      !this.state.choices ||\n      !this.state.questions.length ||\n      !this.state.currentQuestion\n    ) {\n      return <Loading></Loading>\n    }\n\n    let currentChoices = this.state.choices[this.state.currentQuestion.keyed]\n\n    return (\n      <QuestionCard\n        question={this.state.currentQuestion}\n        choices={currentChoices}\n        onAnswer={this.onAnswer}\n        number={this.state.currentQuestionNumber + 1}\n        totalNumber={this.state.questions.length}\n      ></QuestionCard>\n    )\n  }\n\n  private initQuestionsAndAnswers(lang: string) {\n    getQuestions(lang).then((res) =>\n      this.setState((state, props) => ({\n        questions: res, //.slice(0, 5),\n        currentQuestion: res[state.currentQuestionNumber],\n      }))\n    )\n    getChoices(lang).then((res) => this.setState({ choices: res }))\n  }\n}\n","import { proxy } from 'valtio'\n\nexport const state = proxy({ lang: process.env.REACT_APP_DEFAULT_LANG || 'en' })\n","import { useSnapshot } from 'valtio'\nimport './App.css'\nimport { Quiz } from './components/Quiz'\nimport { state } from './state'\n\ntype Props = {\n  lang?: string\n}\n\nexport function App(props: Props) {\n  const snap = useSnapshot(state)\n\n  return <Quiz lang={snap.lang}></Quiz>\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export type Languages = { [code: string]: string }\nexport const languages: Languages = {\n  en: 'English',\n  ru: 'Русский',\n  uk: 'Українська',\n}\n","import { state } from '../state'\nimport { useSnapshot } from 'valtio'\nimport { languages } from '../languages'\n\nexport function SelectLanguage() {\n  const snap = useSnapshot(state)\n  return (\n    <select\n      className=\"form-select mx-auto\"\n      value={snap.lang}\n      onChange={(e) => (state.lang = e.target.value)}\n    >\n      {Object.keys(languages).map((code) => {\n        return (\n          <option key={code} value={code}>\n            {languages[code]}\n          </option>\n        )\n      })}\n    </select>\n  )\n}\n","export default __webpack_public_path__ + \"static/media/logo.c41a7299.svg\";","import { SelectLanguage } from './SelectLanguage'\nimport logo from '../logo.svg'\n\nexport function Base(props: { children: any }) {\n  return (\n    <section className=\"min-h-screen bg-gray-50 \">\n      <header className=\"sticky top-0 bg-white shadow z-10\">\n        <div className=\"flex justify-between p-4 mx-auto max-w-7xl\">\n            <a href=\"/\" className=\"flex items-center text-2xl items-center min-w-100 space-x-4 text-purple-900\">\n              <img src={logo} alt=\"logo\" className=\"w-12 h-12\" />\n              <span className=\"hidden md:inline\">\n                The Big Five Personality Test\n              </span>\n            </a>\n          <div className=\"flex flex-row\">\n            <SelectLanguage />\n          </div>\n        </div>\n      </header>\n      <main className=\"p-4 mx-auto max-w-7xl\">{props.children}</main>\n    </section>\n  )\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\nimport { Base } from './components/Base'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Base>\n      <App />\n    </Base>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}